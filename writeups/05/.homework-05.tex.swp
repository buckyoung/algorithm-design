 
%
% Homework Details
%   - Title
%   - Due date
%   - Class
%   - Section/Time
%   - Instructor
%   - Author
%

\newcommand{\hmwkTitle}{Greedy Algorithms \& Dynamic Programming}
\newcommand{\hmwkProblems}{12, 13 and 1}
\newcommand{\hmwkDueDate}{Monday September 8, 2014}
\newcommand{\ClassName}{Algorithm Design}
\newcommand{\ClassNumber}{CS 1510}
\newcommand{\hmwkAuthorName}{Buck Young and Rob Brown}



%
% Basic Document Settings
%

\documentclass{article}

\usepackage{fancyhdr}
\usepackage{extramarks}
\usepackage{amsmath}
\usepackage{amsthm}
\usepackage{amsfonts}
\usepackage{tikz}
\usepackage[plain]{algorithm}
\usepackage[noend]{algpseudocode}
\usepackage{amssymb}

\usetikzlibrary{automata,positioning}


\topmargin=-0.45in
\evensidemargin=0in
\oddsidemargin=0in
\textwidth=6.5in
\textheight=9.0in
\headsep=0.25in\newcommand{\hmwkClassTime}{Section A}
\linespread{1.1}

\renewcommand\headrulewidth{0.4pt}
\renewcommand\footrulewidth{0.4pt}
\setlength\parindent{0pt}

%
% Create Problem Sections
%

\newcommand{\enterProblemHeader}[1]{
    \nobreak\extramarks{}{Problem \arabic{#1} continued on next page\ldots}\nobreak{}
    \nobreak\extramarks{Problem \arabic{#1} (continued)}{Problem \arabic{#1} continued on next page\ldots}\nobreak{}
}

\newcommand{\exitProblemHeader}[1]{
    \nobreak\extramarks{Problem \arabic{#1} (continued)}{Problem \arabic{#1} continued on next page\ldots}\nobreak{}
    \stepcounter{#1}
    \nobreak\extramarks{Problem \arabic{#1}}{}\nobreak{}
}

\setcounter{secnumdepth}{0}
\newcounter{partCounter}
\newcounter{homeworkProblemCounter}
\setcounter{homeworkProblemCounter}{1}
\nobreak\extramarks{Problem \arabic{homeworkProblemCounter}}{}\nobreak{}

\newenvironment{homeworkProblem}{
    \section{ }
    %\setcounter{partCounter}{1}
    %\enterProblemHeader{homeworkProblemCounter}
}{
    \exitProblemHeader{homeworkProblemCounter}
}



% 
% Header and Footer definition
%

\pagestyle{fancy}
\lhead{\ClassNumber\ - \ClassName}
\chead{\hmwkTitle}
\rhead{Problems \hmwkProblems}
\lfoot{\lastxmark}
\cfoot{\thepage}


%
% Title Page
%

\title{
    \vspace{2in}
	\textmd{\textbf{\ClassNumber}} \\
    \textmd{\textbf{\ClassName}} \\    
    \normalsize\vspace{0.1in}\small{\hmwkTitle} \\
    \normalsize\vspace{0.1in}\small{Problems \hmwkProblems} \\
	\normalsize\vspace{0.1in}\small{Due \hmwkDueDate}    \\
    \vspace{3in}
}

\author{\textbf{\hmwkAuthorName}}
\date{}

\renewcommand{\part}[1]{\textbf{\large Part \Alph{partCounter}}\stepcounter{partCounter}\\}






% 	% 	%	%	%	%	%
%	Document Start 		%
% 	% 	% 	% 	% 	% 	%

\begin{document}

\maketitle

\pagebreak




\begin{homeworkProblem}
\centerline{\textbf{Problem 12}}
\leavevmode
\textbf{Input:} Positive integers $r_1, r_2, ..., r_n$ and $c_1, c_2, ..., c_n$
\\
\textbf{Output:} An $n$ by $n$ matrix with 0/1 entries such that for all $i$ the sum of the $i^{th}$ row in a is $r_i$ and the sum of the $i^{th}$ column is $c_i$.
\\
\textbf{Theorem:} The greedy algorithm (G) given in problem 12 is correct.
\\ \\
\textbf{Proof:} Suppose for the purpose of reaching a contradiction that there exists some input $R = \{r_1, r_2, ..., r_n\}$ and $C = \{c_1, c_2, ..., c_n\}$ such that G produces unacceptable output. Let $G(R, C) = A$ be the matrix that G produces, and let $OPT(R, C) = B$ be the matrix that some optimal algorithm which agrees for the most number of steps produces.
\\ \\
Consider the first pair of indices $(i, j)$ where the indexed values of A disagree with those of B. In other words, consider $(i, j)$ such that $\forall(x, y) \le (i, j): a_{ij} = b_{ij}$.
\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ 
Since $a_{ij} = b_{ij}$, and both A and B consist entirely of 0/1 values, we have two cases:
\\ \\
\centerline{ 1) $a_{i,j} = 0$ and $b_{i,j} = 1$}
\\
\centerline{ 2) $a_{i,j} = 1$ and $b_{i,j} = 0$}
\\ \\
Consider case 1. Since $b_{i,j} = 1$ and $(\sum_{w=1}^{n} b_{i,w})= r_i$ we know that in some column ($m$) of B's $i^{th}$ row there exists $b_{i,m} = 0$ where $b_{i,m} \ne a_{i,m}$ (ie, $a_{i,m} = 1$). A is constructed so that the $a_i^{th}$ row has exactly $r_i$ 1's. If OPT gives B a 1 at $(i,j)$, it must compensate later by NOT having a 0 at some later point. This is the value we call $b_{i,m}$. Likewise, since OPT must produce $(\sum_{h=1}^{n} b_{h,i}) = c_j$, there must be some $b_{k,j}$ in the $j^{th}$ column of B such that $b_{k,j} = 0$ and $a_{k,j} = 1$. 
\\ \\ 
By the same logic, for case 2 we can deduce that there is some column ($m$) in B's $i^{th}$ row where $b_{i,m} = 1$ and $a_{i,m} = 0$; likewise, there is some row $k$ in B's $j^{th}$ column where $b_{k, j} =1$ and $a_{k,j} = 0$. 
\\ \\
Let OPT'(I) = OPT(I) = B with the values of $b_{i,j}$, $b_{i, m}$, and $b_{k,j}$ changed to their opposite values.
\\ \\
\centerline{CASE 1} \\ \\
\centerline{$\sum_{w=1}^{n} b_{i,w} = r_i =  r_i - b_{i,j} - b_{i,m} + !(b_{i, m}) + !(b_{i, j}) =  r_i - 1 - 0 + 0 + 1 = r_i$}
\\ \\
\centerline{$\sum_{h=1}^{n} b_{h,j} = c_j =  c_j - b_{i,j} - b_{k,j} + !(b_{k, j}) + !(b_{i, j}) =  c_j - 1 - 0 + 0 + 1 = c_j$}
\\ \\ \\ \\
\centerline{CASE 2} \\ \\
\centerline{$\sum_{w=1}^{n} b_{i,w} = r_i =  r_i - b_{i,j} - b_{i,m} + !(b_{i, m}) + !(b_{i, j}) =  r_i - 0 - 1 + 1 + 0 = r_i$}
\\ \\
\centerline{$\sum_{h=1}^{n} b_{h, j} = c_j =  c_j - b_{i,j} - b_{k,j} + !(b_{k, j}) + !(b_{i, j}) =  c_j - 0 - 1 + 1 + 0 = c_j$}
\\ \\
We have thus demonstrated that, if OPT was indeed correct to begin with (ie, respective sums equaled $c_j$ ad $r_i$), these modifications do not effect the correctness of OPT'. It is also evident that OPT' is more like G for one additional step. 
\\ \\
We now have that OPT is not the correct solution which agrees with G for the most number of steps, and we have a contradiction. 
\\ \\
$\therefore$ G is correct


\end{homeworkProblem}



\pagebreak
\pagebreak



\begin{homeworkProblem}
\centerline{\textbf{Problem 13}}
\leavevmode
\textbf{(a)} 
\\
\textbf{Input:} A set of $n$ jobs $j$ -- each job is described by an integer release time and deadline ($r_j$, $d_j$) -- each of which must run for one unit of time. Additionally at each time interval t $\in$ [0, $T$), the machine may be ON or OFF at the time interval ($t$, $t+1$). Let $T$ equal the maximum deadline -- max($d_j$) for all $j$
\\ \\
\textbf{Output:} Whether or not a feasible sequence was found in which every job ran for one unit of time at some interval after $r_j$ and before $d_j$.
\\ \\
\textbf{Algorithm:} Run the job with the earliest deadline first:
\begin{algorithmic}
\If{the machine is on at time $t$}
	\For{each job that has not yet run \&\& is released -- ($r_j$ $\leq$ $t$)}
		\State Run the job with the earliest deadline -- (min($d_j$) for all $j$) -- (break ties arbitrarily)
	\EndFor
\EndIf
\\
\If{all jobs in the input $I$ have run by time $T$}
	\State return FEASIBLE
\Else
	\State return NOT FEASIBLE
\EndIf
\end{algorithmic}
\leavevmode
\\
\textbf{Theorem:} The described "earliest deadline first" algorithm EDF is correct.
\\ \\
\textbf{Proof:} Assume to reach a contradiction that there exists an input on which EDF produces an unacceptable output.
\\ \\
Let EDF(I) = \{$j_{\alpha(1)}$, ..., $j_{\alpha(n)}$\} be the output of EDF on input I
\\ \& OPT(I) = \{$j_{\beta(1)}$, ..., $j_{\beta(n)}$\} be the optimal solution which agrees with EDF(I) for the most number of steps
\\ \\ Let $k$ be the first point of disagreement between EDF and OPT
\\ \\ \\ \\ \\ \\ \\ \\ \\
By the definition of EDF, we know that the deadline for $j_k$ in EDF(I) is earlier than (or tied with) the deadline of $j_k$ in OPT(I) -- $d_{\alpha(k)}$ $\leq$ $d_{\beta(k)}$
\\ \\
Let 

\end{homeworkProblem}



\pagebreak



\begin{homeworkProblem}
\centerline{\textbf{Problem 13}}
\leavevmode
\textbf{(b)} 
\\
\textbf{Input:}
\\
\textbf{Output:} 
\\ \\
\textbf{Algorithm:} 
\\ \\
\textbf{Theorem:} 
\\
\textbf{Proof:} 
\end{homeworkProblem}



\pagebreak



\begin{homeworkProblem}
\centerline{\textbf{Problem 1}}
\leavevmode
\textbf{(a)}
\begin{algorithmic}
\Procedure{T}{int $n$}
	\If{$n < 0$}
		\State \Return -1
	\EndIf
	\If{n == 0 or n==1}
  		\State return 2;
	\EndIf
	
	\State SUM = 0
	\For {$1 \le i \le n-1$}
		\State SUM+=T(i)*T(i-1)
	\EndFor	
	\State \Return SUM
\EndProcedure
\end{algorithmic}
Recursive algorithms which only reduce the input by a constant size each call are inherently exponential. Here, we have an algorithm which does this (ie, only decreases the input size by a constant size each call), and additionally creates this many more recursive calls at each point in the recursion. Clearly, it is exponential. \\
\\
\textbf{(b)}
\begin{algorithmic}
\Procedure{T}{int $n$}
	\If{$n < 0$}
		\State \Return -1
	\EndIf
	\If{n == 0 or n==1}
  		\State return 2;
	\EndIf
	
	\State T[0] = 2, T[1] = 2
	\For {$2 \le i \le n$}
		\State SUM = 0
		\For {$1 \le j \le n-1$}
			\State SUM+=T[j]*T[j-1]
		\EndFor
	T[i] = SUM
	\EndFor	
	\State \Return T[n]
\EndProcedure
\end{algorithmic}
Clearly this algorithm is $\mathcal{O}(n^2)$. This is achieved by starting at the base $(n=0, n=1)$ and computing the the next value based on the sum of all the previous; as opposed to starting at the top and recomputing everything at each step closer to the base. \\
\\
\textbf{(c)} 
\begin{algorithmic}
\Procedure{T}{int $n$}
	\If{$n < 0$}
		\State \Return -1
	\EndIf
	\If{n == 0 or n==1}
  		\State \Return 2;
	\EndIf
	
	\State T[0] = 2, T[1] = 2, T[2] = 4
	\For {$3 \le i \le n$}
		\State T[i] = T[i-1]*T[i-2] + T[i-1]
	\EndFor	
	\State \Return T[n]
\EndProcedure
\end{algorithmic}
Clearly this algorithm is $\mathcal{O}(n)$.

\end{homeworkProblem}



\end{document}